// <auto-generated />
using System;
using DataAccess.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.DataAccess.Postgres.Migrations
{
    [DbContext(typeof(StudentsSocialDbContext))]
    [Migration("20250530130858_Create_RefreshTokens")]
    partial class Create_RefreshTokens
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Core.Entities.CloseFriendEntity", b =>
                {
                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CloseFriendUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FollowedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("FollowedAt");

                    b.HasKey("OwnerUserId", "CloseFriendUserId");

                    b.HasIndex("CloseFriendUserId");

                    b.ToTable("CloseFriends", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.FavouritePostEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FavouredAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("FavouredAt");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("FavouritePosts", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Images");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.LikeCommentEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("LikedAt");

                    b.HasKey("UserId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("LikesComments", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.LikePostEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("LikedAt");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("LikesPosts", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.PostEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPrivate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.PostTagEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TaggedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("TaggedAt");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostsTags", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("RefreshTokenValidityMins")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("backend.Core.Entities.ReplyEntity", b =>
                {
                    b.Property<Guid>("ReplyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RepliedId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RepliedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("RepliedAt");

                    b.HasKey("ReplyId", "RepliedId");

                    b.HasIndex("RepliedId");

                    b.ToTable("Replies", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.SubscriptionEntity", b =>
                {
                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubscribedToId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubscribedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("SubscribedAt");

                    b.HasKey("SubscriberId", "SubscribedToId");

                    b.HasIndex("SubscribedToId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Biography");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Lastname");

                    b.Property<bool>("Online")
                        .HasColumnType("boolean")
                        .HasColumnName("IsOnline");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Password");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ProfilePicture");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.VideoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Videos", (string)null);
                });

            modelBuilder.Entity("backend.Core.Entities.CloseFriendEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.UserEntity", "CloseFriendUser")
                        .WithMany()
                        .HasForeignKey("CloseFriendUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Core.Entities.UserEntity", "OwnerUser")
                        .WithMany("ClosedFriends")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CloseFriendUser");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("backend.Core.Entities.CommentEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.PostEntity", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Core.Entities.UserEntity", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Core.Entities.FavouritePostEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.PostEntity", "Post")
                        .WithMany("FavouredBy")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Core.Entities.UserEntity", "User")
                        .WithMany("FavouritePosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Core.Entities.ImageEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.PostEntity", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("backend.Core.Entities.LikeCommentEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.CommentEntity", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Core.Entities.UserEntity", "User")
                        .WithMany("LikesComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Core.Entities.LikePostEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.PostEntity", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Core.Entities.UserEntity", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Core.Entities.PostEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.UserEntity", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Core.Entities.PostTagEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.PostEntity", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Core.Entities.UserEntity", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Core.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Core.Entities.ReplyEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.CommentEntity", "Replied")
                        .WithMany()
                        .HasForeignKey("RepliedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Core.Entities.CommentEntity", "Reply")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Replied");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("backend.Core.Entities.SubscriptionEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.UserEntity", "SubscribedTo")
                        .WithMany()
                        .HasForeignKey("SubscribedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Core.Entities.UserEntity", "Subscriber")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubscribedTo");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("backend.Core.Entities.VideoEntity", b =>
                {
                    b.HasOne("backend.Core.Entities.PostEntity", "Post")
                        .WithMany("Videos")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("backend.Core.Entities.CommentEntity", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("backend.Core.Entities.PostEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavouredBy");

                    b.Navigation("Images");

                    b.Navigation("Likes");

                    b.Navigation("Tags");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("backend.Core.Entities.UserEntity", b =>
                {
                    b.Navigation("ClosedFriends");

                    b.Navigation("Comments");

                    b.Navigation("FavouritePosts");

                    b.Navigation("Likes");

                    b.Navigation("LikesComments");

                    b.Navigation("Posts");

                    b.Navigation("Subscriptions");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
